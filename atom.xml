<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cara的ios]]></title>
  <link href="http://cararila.github.io/atom.xml" rel="self"/>
  <link href="http://cararila.github.io/"/>
  <updated>2015-08-17T19:29:09+08:00</updated>
  <id>http://cararila.github.io/</id>
  <author>
    <name><![CDATA[QQ917314919]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[01-KVC机制]]></title>
    <link href="http://cararila.github.io/blog/2013/07/21/di-er-pian-bo-ke/"/>
    <updated>2013-07-21T22:51:03+08:00</updated>
    <id>http://cararila.github.io/blog/2013/07/21/di-er-pian-bo-ke</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">1</span><span class="err">、为什么苹果提供了</span><span class="n">KVC</span><span class="err">机制？什么是</span><span class="n">KVC</span><span class="err">？</span>
</span><span class='line'><span class="err">答：简化代码，编程方便呀。</span>
</span><span class='line'><span class="n">KVC</span><span class="err">的基本调用包括</span><span class="o">-</span><span class="nl">valueForKey</span><span class="p">:</span><span class="err">和</span><span class="o">-</span><span class="nl">setValue</span><span class="p">:</span><span class="nl">forKey</span><span class="p">:</span><span class="err">。以字符串的形式向对象发送消息，这个字符串是我们关注的属性的关键信息。</span>
</span><span class='line'><span class="err">看下面两段代码</span><span class="n">NSTableView</span><span class="err">委托方法的对比</span>
</span><span class='line'><span class="mi">1</span><span class="err">）不使用</span><span class="n">KVC</span><span class="err">的代码：</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">tableView</span><span class="p">:(</span><span class="n">NSTableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableview</span>
</span><span class='line'><span class="nl">objectValueForTableColumn</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">column</span> <span class="nl">row</span><span class="p">:(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="n">row</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ChildObject</span> <span class="o">*</span><span class="n">child</span> <span class="o">=</span> <span class="p">[</span><span class="n">childrenArray</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">([[</span><span class="n">column</span> <span class="n">identifier</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;name&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="p">[</span><span class="n">child</span> <span class="n">name</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">([[</span><span class="n">column</span> <span class="n">identifier</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;age&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="p">[</span><span class="n">child</span> <span class="n">age</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">([[</span><span class="n">column</span> <span class="n">identifier</span><span class="p">]</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;favoriteColor&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="p">[</span><span class="n">child</span> <span class="n">favoriteColor</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// And so on. </span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="err">）使用</span><span class="n">KVC</span><span class="err">的代码：</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nl">tableView</span><span class="p">:(</span><span class="n">NSTableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableview</span>
</span><span class='line'><span class="nl">objectValueForTableColumn</span><span class="p">:(</span><span class="kt">id</span><span class="p">)</span><span class="n">column</span> <span class="nl">row</span><span class="p">:(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="n">row</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ChildObject</span> <span class="o">*</span><span class="n">child</span> <span class="o">=</span> <span class="p">[</span><span class="n">childrenArray</span> <span class="nl">objectAtIndex</span><span class="p">:</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>   <span class="k">return</span> <span class="p">[</span><span class="n">child</span> <span class="nl">valueForKey</span><span class="p">:[</span><span class="n">column</span> <span class="n">identifier</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="err">、</span><span class="n">KVC</span><span class="err">的缺点</span>
</span><span class='line'><span class="n">KVC</span><span class="err">这么有用，为什么没有用它来处理所有对象，并抛弃存取方法？</span><span class="n">KVC</span><span class="err">有什么缺点呢？</span>
</span><span class='line'><span class="err">答：因为</span><span class="n">KVC</span><span class="err">需要解析字符串来计算你需要的答案，因此速度比较慢。另外编译器无法对它进行错误检查。</span>
</span><span class='line'>
</span><span class='line'><span class="mi">3</span><span class="err">、对于</span><span class="n">KVC</span><span class="err">，</span><span class="n">Cocoa</span><span class="err">自动放入和取出标量值。</span>
</span><span class='line'><span class="err">也就是说，当使用</span><span class="o">-</span><span class="nl">setValue</span><span class="p">:</span><span class="nl">forKey</span><span class="p">:</span><span class="err">时，它自动将标量值（</span><span class="kt">int</span><span class="err">、</span><span class="kt">float</span><span class="err">和</span><span class="k">struct</span><span class="err">）放入</span><span class="bp">NSNumber</span><span class="err">或</span><span class="bp">NSValue</span><span class="err">中；当使用</span><span class="o">-</span><span class="nl">valueForKey</span><span class="p">:</span><span class="err">时，它自动将这些标量值从这些对象中取出。仅</span><span class="n">KVC</span><span class="err">具有这种自动包装功能，常规方法调用和属性语法不具备该功能。</span>
</span><span class='line'><span class="err">如果在调用</span><span class="o">-</span><span class="nl">setValue</span><span class="p">:</span><span class="nl">forKey</span><span class="p">:</span><span class="err">之中设置一个标量值，需要将他包装起来。</span>
</span><span class='line'><span class="err">比如</span>
</span><span class='line'><span class="p">[</span><span class="n">car</span> <span class="nl">setValue</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithFloat</span><span class="p">:</span> <span class="mf">25062.4</span><span class="p">]</span> <span class="nl">forKey</span><span class="p">:</span> <span class="p">@</span><span class="err">”</span><span class="n">mileage</span><span class="err">”</span><span class="p">];</span>
</span><span class='line'><span class="err">属性</span><span class="n">mileage</span><span class="err">是标量（</span><span class="kt">float</span><span class="err">类型），所以要用</span><span class="bp">NSNumber</span><span class="err">包装起来。</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">car</span> <span class="nl">setValue</span><span class="p">:</span> <span class="p">@</span><span class="err">”</span><span class="n">Harold</span><span class="err">”</span> <span class="nl">forKey</span><span class="p">:</span> <span class="p">@</span><span class="err">”</span><span class="n">name</span><span class="err">”</span><span class="p">];</span>
</span><span class='line'><span class="err">上面的代码功能是，它首先查找属性</span><span class="n">name</span><span class="err">的</span><span class="k">setter</span><span class="err">方法</span><span class="o">-</span><span class="n">setName</span><span class="err">，并使用参数</span><span class="p">@</span><span class="err">”</span><span class="n">Harold</span><span class="err">”调用它。如果不存在</span><span class="k">setter</span><span class="err">方法，它将在类中产找名为</span><span class="n">name</span><span class="err">或</span><span class="n">_name</span><span class="err">的实例变量，然后为它赋值。</span>
</span><span class='line'>
</span><span class='line'><span class="err">题外话：编译器和苹果公司都以下划线开头的形式保存实例变量名称，如果你尝试在其他地方使用下划线，可能出现严重的错误。这条规则不是强制性的，但是如果不遵守它，你可能会遇到某种风险。</span>
</span><span class='line'>
</span><span class='line'><span class="mi">4</span><span class="err">、</span><span class="n">KVC</span><span class="err">还支持指定关键路径，可以遵循一系列关系来指定该路径。</span>
</span><span class='line'><span class="err">比如</span>
</span><span class='line'><span class="p">[</span><span class="n">car</span> <span class="nl">setValue</span><span class="p">:</span> <span class="p">[</span><span class="bp">NSNumber</span> <span class="nl">numberWithInt</span><span class="p">:</span> <span class="mi">155</span><span class="p">]</span>
</span><span class='line'>  <span class="nl">forKeyPath</span><span class="p">:</span> <span class="p">@</span><span class="err">”</span><span class="n">engine</span><span class="p">.</span><span class="n">horsepower</span><span class="err">”</span><span class="p">];</span>
</span><span class='line'><span class="err">这些路径的深度是任意的，具体取决与对象图的复杂度。</span>
</span><span class='line'>
</span><span class='line'><span class="mi">5</span><span class="err">、</span><span class="n">KVC</span><span class="err">的整体操作，示例如下：</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">pressures</span> <span class="o">=</span> <span class="p">[</span><span class="n">car</span> <span class="nl">valueForKeyPath</span><span class="p">:</span> <span class="p">@</span><span class="err">”</span><span class="n">tires</span><span class="p">.</span><span class="n">pressure</span><span class="err">”</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="mi">6</span><span class="err">、</span><span class="n">KVC</span><span class="err">的集合操作：</span>
</span><span class='line'><span class="bp">NSNumber</span> <span class="o">*</span><span class="n">count</span> <span class="o">=</span> <span class="p">[</span><span class="n">garage</span> <span class="nl">valueForKeyPath</span><span class="p">:</span> <span class="p">@</span><span class="err">”</span><span class="n">cars</span><span class="p">.@</span><span class="n">count</span><span class="err">”</span><span class="p">];</span>
</span><span class='line'><span class="n">cars</span><span class="err">用于获取</span><span class="n">cars</span><span class="err">属性，它是来自</span><span class="n">garage</span><span class="err">的</span><span class="bp">NSArray</span><span class="err">类型的值。</span>
</span><span class='line'><span class="p">@</span><span class="n">count</span><span class="err">，</span><span class="p">@</span><span class="err">意味着后面将进行一些运算，</span><span class="p">@</span><span class="n">count</span><span class="err">的意思是告诉</span><span class="n">KVC</span><span class="err">机制对键值路径左侧部分的结果进行计数操作。</span>
</span><span class='line'><span class="err">还包括如下操作</span>
</span><span class='line'><span class="n">Simple</span> <span class="n">Collection</span> <span class="n">Operators</span>
</span><span class='line'><span class="p">@</span><span class="n">avg</span>
</span><span class='line'><span class="p">@</span><span class="n">count</span>
</span><span class='line'><span class="p">@</span><span class="n">max</span>
</span><span class='line'><span class="p">@</span><span class="n">min</span>
</span><span class='line'><span class="p">@</span><span class="n">sum</span>
</span><span class='line'>
</span><span class='line'><span class="n">Object</span> <span class="n">Operators</span>
</span><span class='line'><span class="p">@</span><span class="n">distinctUnionOfObjects</span>
</span><span class='line'><span class="p">@</span><span class="n">unionOfObjects</span>
</span><span class='line'>
</span><span class='line'><span class="n">Array</span> <span class="n">and</span> <span class="n">Set</span> <span class="n">Operators</span>
</span><span class='line'><span class="p">@</span><span class="n">distinctUnionOfArrays</span>
</span><span class='line'><span class="p">@</span><span class="n">unionOfArrays</span>
</span><span class='line'><span class="p">@</span><span class="n">distinctUnionOfSets</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[01-关于alloc和init嵌套调用]]></title>
    <link href="http://cararila.github.io/blog/2013/07/16/di-%5B%3F%5D-pian-bo-ke/"/>
    <updated>2013-07-16T01:45:05+08:00</updated>
    <id>http://cararila.github.io/blog/2013/07/16/di-[?]-pian-bo-ke</id>
    <content type="html"><![CDATA[<p>1、关于alloc和init嵌套调用：</p>

<ul>
<li><p>我们总是以如下方式嵌套alloc和init调用，为什么？</p>

<p> CExample *example1 = [[CExample alloc] init];</p></li>
<li><p>而不是像下面这样调用</p>

<p>   CExample *example2 = [CExample alloc];</p>

<p>   [example2 init];</p></li>
</ul>


<p>2、初始化（init）方法返回的对象可能与分配（alloc）的对象不同。比如类簇中的NSString和NSArray等，实际上是一群隐藏在通用接口之下的与实现相关的类，创建NSString对象时，实际获得的可能是NSLiteralString、NSCFString、NSSimpleCString、NSBallOfString或者其他未写入文档的与实现相关的对象。由于init方法可以接受参数，所以该方法的代码能够检查其接受的参数的值，并判断返回另一个类的对象可能更合适。基于这种一认知，字符串初始化函数可能决定创建一个属于其他类的对象（该对象更适合被期望的字符串的要求），然后返回该对象而不是原来的对象。</p>
]]></content>
  </entry>
  
</feed>
